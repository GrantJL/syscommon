<?xml version="1.0"?>
<!--
                  Welcome to the Portico Build System

       The Portico build system is an artefact-driven, modular, Ant
       based system. The base framework is split up over a number of
       different build files (base structure, macros, etc...) and is
       designed to be extended rather than modified. The full system
       is introduced and described in the online documentation:
       
       http://porticoproject.org/index.php?title=Building_Portico

                              *** NOTE ***                        
       Do not edit this file except to add new profiles. This system
       is designed to be extended rather than modified directly.
-->
<project name="syscommon" default="sandbox">

	<!-- =========================================================== -->
	<!--                      General Settings                       -->
	<!-- =========================================================== -->
	<description>
        SysCommon is an extremely lightweight set of utility classes that encapsulate
		commonly used systems programming tools such as Sockets, Threads, Locks etc.
		in an easy to use API.
	</description>

	<!-- bring in the ant-contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

	<!-- =========================================================== -->
	<!--               System Properties and Utilities               -->
	<!-- =========================================================== -->
	<import file="profiles/system.properties.xml"/>    <!-- standard set of common properties -->
	<import file="profiles/system.macros.xml"/>        <!-- standard set of common macros -->

	<jdk-home/> <!-- validate JAVA_HOME and set jdk.home property -->

	<!-- =========================================================== -->
	<!--                       Master Targets                        -->
	<!-- =========================================================== -->
	<target name="clean"
	        description="Removes all generated build artefacts."
	        depends="master.clean,common.clean"/>
	
	<target name="compile"
	        description="Compile all the production code."
	        depends="master.compile"/>

	<target name="test"
	        description="Compile and run the automated test suite."
	        depends="master.test"/>

	<target name="sandbox"
	        description="Create a sandbox environment to test and validate in."
	        depends="master.sandbox"/>

	<target name="installer"
	        description="Create an installer package from the sandbox."
	        depends="master.installer"/>

	<target name="release"
	        description="Create a production-ready release. Run all tests and generate installer."
	        depends="clean,test,sandbox,installer,master.release"/>
	
	<!-- =========================================================== -->
	<!--                      Extension Points                       -->
	<!-- =========================================================== -->
	<!-- These extension points are defined for the various profile targets
	     to hook onto, thus allowing them to identify themselves as targets
	     that should be run as part of a particular global action.
	     
	     This means that when we run "compile", any imported targets that
	     are declared as an extensionOf "master.compile" will be executed.
	     
	     An extension point for each major build action is defined.
	-->
	<extension-point name="master.clean"/>
	<extension-point name="master.compile"/>
	<extension-point name="master.test"/>
	<extension-point name="master.sandbox"/>
	<extension-point name="master.installer"/>
	<extension-point name="master.release"/>

	<!-- =========================================================== -->
	<!--                        Build Profiles                       -->
	<!-- =========================================================== -->
	<!-- Mac OS X C++ profiles -->
	<include file="profiles/macosx/cpp.xml"          as="cpp"          if="platform.macosx"/>
	
	<!-- Windows 32bit C++ and Installer profiles -->
	<include file="profiles/win32/cpp32.xml"         as="cpp"          if="platform.windows"/>

	<!-- Windows 64bit C++ and Installer profiles -->
	<!--
	<include file="profiles/windows/cpp64.xml"       as="cpp"          if="platform.win64"/>
	<include file="profiles/windows/installer64.xml" as="installer"    if="platform.win64"/>
	-->
	<echo>platform.linux is ${platform.linux64}</echo>
	<include file="profiles/linux/cpp.xml"          as="cpp"          if="platform.linux"/>

	<!-- =========================================================== -->
	<!--      Private Internal Targets. Do not modify or extend.     -->
	<!-- =========================================================== -->
	<target name="common.clean">
		<!-- Remove any top-level directories that might need to go -->
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>

</project>
